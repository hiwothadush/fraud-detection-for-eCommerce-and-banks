{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1_snmtkPZfkrBp09v3SqBkf6DHFdTPHPN","authorship_tag":"ABX9TyMiI7LVMwFEDpMo2mwgqITi"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":5,"metadata":{"id":"rEwRpVtTPynP","executionInfo":{"status":"ok","timestamp":1739903717974,"user_tz":0,"elapsed":591,"user":{"displayName":"hiwot hadush","userId":"03408115675593718004"}}},"outputs":[],"source":["from flask import Flask, request, jsonify,render_template\n","from flask_cors import CORS\n","import pandas as pd\n","import pickle\n","import datetime\n","import numpy as np\n","import sys\n","import os\n","from sklearn.preprocessing import OneHotEncoder\n","import joblib\n","import gdown"]},{"source":["\n","# Try to get the current directory using __file__try:\n","    current_directory = os.path.dirname(os.path.abspath(__file__))\n","# If __file__ is not defined (as in Jupyter Notebook or IPython)\n","except NameError:\n","    # Use os.getcwd() to get the current working directory\n","    current_directory = os.getcwd()\n","\n","project_directory = os.path.abspath(os.path.join(current_directory, '..'))\n","sys.path.append(project_directory)\n","\n","sys.path.append(os.path.abspath('../models'))"],"cell_type":"code","metadata":{"id":"-7er91UHV6aA","executionInfo":{"status":"ok","timestamp":1739903728108,"user_tz":0,"elapsed":594,"user":{"displayName":"hiwot hadush","userId":"03408115675593718004"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# Initialize Flask app\n","app = Flask(__name__)\n","CORS(app)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l1jpaLYhVfMm","executionInfo":{"status":"ok","timestamp":1739904006297,"user_tz":0,"elapsed":599,"user":{"displayName":"hiwot hadush","userId":"03408115675593718004"}},"outputId":"d4475537-a102-4ca8-d6c6-04eca0b4ad83"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<flask_cors.extension.CORS at 0x7f5a5ea95f50>"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["# df = pd.read_csv('data/merged_data.csv')\n","data_id='1--ENhuKQdRjdp2iKdpH2dmvW3vmGUA4q'\n","destination_file='/content/drive/MyDrive/fraud detection/data/preprocessed_fraud_data.csv'\n","if not os.path.exists(destination_file):\n","    # Download the file if it doesn't exist\n","    gdown.download(f'https://drive.google.com/uc?id={data_id}', destination_file, quiet=False)\n","else:\n","    print(f\"{destination_file} already exists. Skipping download.\")\n","\n","df=pd.read_csv('/content/drive/MyDrive/fraud detection/data/preprocessed_fraud_data.csv')\n","# # Load the pre-trained randomforrest model using pickle\n","# with open('../models/fraud_data/RandomForestClassifier-30-10-2024-10-10-39-00.pkl', 'rb') as f:\n","#     rf_model = pickle.load(f)\n","\n","# Google Drive file ID\n","file_id = '1--ENhuKQdRjdp2iKdpH2dmvW3vmGUA4q'\n","# Output file path\n","destination = '/content/drive/MyDrive/fraud detection/data/preprocessed_fraud_data.csv'"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qd9iVtlPWJsL","executionInfo":{"status":"ok","timestamp":1739904739913,"user_tz":0,"elapsed":1809,"user":{"displayName":"hiwot hadush","userId":"03408115675593718004"}},"outputId":"1b29e9b1-9198-429b-d30b-1cd907d0cea8"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/fraud detection/data/preprocessed_fraud_data.csv already exists. Skipping download.\n"]}]},{"cell_type":"code","source":["# Check if the destination file exists\n","if not os.path.exists(destination):\n","    # Download the file if it doesn't exist\n","    gdown.download(f'https://drive.google.com/uc?id={file_id}', destination, quiet=False)\n","else:\n","    print(f\"{destination} already exists. Skipping download.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n3PWZIoyYgm6","executionInfo":{"status":"ok","timestamp":1739904744350,"user_tz":0,"elapsed":383,"user":{"displayName":"hiwot hadush","userId":"03408115675593718004"}},"outputId":"631f9317-05b6-421e-91a7-0a1d48915955"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/fraud detection/data/preprocessed_fraud_data.csv already exists. Skipping download.\n"]}]},{"cell_type":"code","source":["# Load the model\n","with open(destination, 'rb') as f:\n","    rf_model = pickle.load(f)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":176},"id":"BgfDQa3bZ3e8","executionInfo":{"status":"error","timestamp":1739904770915,"user_tz":0,"elapsed":455,"user":{"displayName":"hiwot hadush","userId":"03408115675593718004"}},"outputId":"ea08200b-9ec6-4d03-d952-228a076d13bc"},"execution_count":11,"outputs":[{"output_type":"error","ename":"UnpicklingError","evalue":"could not find MARK","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mUnpicklingError\u001b[0m                           Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-b6ae30c92d69>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Load the model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdestination\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'rb'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0mrf_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpickle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mUnpicklingError\u001b[0m: could not find MARK"]}]},{"source":["# Load the pre-trained randomforrest model using pickle\n","# Assuming your model is named 'RandomForestClassifier-30-10-2024-10-10-39-00.pkl' and located in '../models/fraud_data/'\n","model_path = '/content/drive/MyDrive/fraud detection/models/fraud_data/RandomForestClassifier-17-02-2025-21-28-43-00.pkl'\n","with open(model_path, 'rb') as f:\n","    rf_model = pickle.load(f)"],"cell_type":"code","metadata":{"id":"fRf4vTUjaG4H","executionInfo":{"status":"ok","timestamp":1739904913823,"user_tz":0,"elapsed":3499,"user":{"displayName":"hiwot hadush","userId":"03408115675593718004"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["def preprocess_input(data):\n","    input_data = pd.DataFrame([data])\n","    input_data['purchase_time'] = pd.to_datetime(input_data['purchase_time'])\n","    input_data['signup_time'] = pd.to_datetime(input_data['signup_time'])\n","    input_data['hour_of_day'] = input_data['purchase_time'].dt.hour\n","    input_data['day_of_week'] = input_data['purchase_time'].dt.dayofweek\n","    input_data['transaction_count'] =1\n","    selected_features = input_data[['purchase_value', 'age', 'transaction_count', 'hour_of_day', 'day_of_week',\n","                                    'source', 'browser', 'sex', 'country']]\n","    all_possible_values = {\n","        'source': ['Ads', 'Direct', 'SEO'],\n","        'browser': ['Chrome', 'FireFox', 'IE', 'Opera', 'Safari'],\n","        'sex': ['F', 'M']\n","    }\n","\n","\n","    # One-hot encode `source`, `browser`, and `sex` using predefined categories\n","    one_hot_encoder = OneHotEncoder(categories=[all_possible_values['source'],\n","                                                all_possible_values['browser'],\n","                                                all_possible_values['sex']],\n","                                    drop=None, sparse_output=False, handle_unknown='ignore')\n","    one_hot_encoded = one_hot_encoder.fit_transform(selected_features[['source', 'browser', 'sex']])\n","\n","    # Get feature names from the encoder and create a DataFrame\n","    one_hot_columns = one_hot_encoder.get_feature_names_out(['source', 'browser', 'sex'])\n","    one_hot_df = pd.DataFrame(one_hot_encoded, columns=one_hot_columns, index=input_data.index)\n","\n","    # Concatenate one-hot encoded columns with the selected features\n","    encoded = pd.concat([selected_features.drop(columns=['source', 'browser', 'sex']), one_hot_df], axis=1)\n","\n","    # Load the saved frequency encoding mapping\n","    freq_encoding = joblib.load('params/country_freq_encoding.joblib')\n","    # Map the frequency encoding to the 'country' column in the new data\n","    encoded['country_encoded'] = encoded['country'].map(freq_encoding).fillna(0)\n","    # Drop the original 'country' column if needed\n","    processed = encoded.drop(columns=['country'])\n","\n","    return processed\n","\n","@app.route('/')\n","def form():\n","    return render_template('form.html')\n","\n","# Endpoint for summary statistics\n","@app.route('/api/summary', methods=['GET'])\n","def get_summary():\n","    total_transactions = df.shape[0]\n","    total_fraud_cases = df[df['class'] == 1].shape[0]\n","    fraud_percentage = (total_fraud_cases / total_transactions) * 100\n","\n","    summary = {\n","        \"total_transactions\": total_transactions,\n","        \"total_fraud_cases\": total_fraud_cases,\n","        \"fraud_percentage\": fraud_percentage\n","    }\n","    return jsonify(summary)\n","\n","# Endpoint for fraud cases over time\n","@app.route('/api/fraud_trend', methods=['GET'])\n","def get_fraud_trend():\n","    # Assuming `signup_time` is in datetime format\n","    df['signup_time'] = pd.to_datetime(df['signup_time'])\n","    fraud_trend = df[df['class'] == 1].resample('M', on='signup_time').size().reset_index(name='fraud_count')\n","\n","    trend_data = fraud_trend.to_dict(orient='records')\n","    return jsonify(trend_data)\n","\n","# Endpoint for frequency distribution of selected feature\n","@app.route('/api/frequency_distribution/<string:feature>', methods=['GET'])\n","def get_frequency_distribution(feature):\n","    value_counts = df[feature].value_counts().reset_index()\n","    value_counts.columns = [feature, 'count']\n","\n","    freq_data = value_counts.to_dict(orient='records')\n","    return jsonify(freq_data)\n","\n","# Endpoint for fraud distribution by country\n","@app.route('/api/fraud_distribution', methods=['GET'])\n","def get_fraud_distribution():\n","    fraud_counts = df[df['class'] == 1]['country'].value_counts().reset_index()\n","    fraud_counts.columns = ['country', 'fraud_count']\n","\n","    # Return as JSON\n","    fraud_data = fraud_counts.to_dict(orient='records')\n","    return jsonify(fraud_data)\n","\n","@app.route('/submit', methods=['POST'])\n","def submit():\n","    data = request.form\n","    processed_data = preprocess_input(data)\n","\n","    # Make prediction with the loaded model\n","    prediction = rf_model.predict(processed_data)\n","    result_data={'prediction':int(prediction[0]),\n","                 'meaning': 'a Fraud' if int(prediction[0])==1 else 'Not a Fraud' }\n","\n","    # return render_template('result.html', result=result_data)\n","    return jsonify(result_data)\n","\n","# Define a health check route\n","@app.route('/health', methods=['GET'])\n","def health():\n","    return jsonify({'status': 'API is running', 'time': datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")})\n","\n","# Run Flask app\n","if __name__ == '__main__':\n","    app.run(host='0.0.0.0', port=5000)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bM5PeOb9a19g","outputId":"3f1fa52a-5b43-4462-d5e4-c4bfba160cb5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[" * Serving Flask app '__main__'\n"," * Debug mode: off\n"]},{"output_type":"stream","name":"stderr","text":["INFO:werkzeug:\u001b[31m\u001b[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\u001b[0m\n"," * Running on all addresses (0.0.0.0)\n"," * Running on http://127.0.0.1:5000\n"," * Running on http://172.28.0.12:5000\n","INFO:werkzeug:\u001b[33mPress CTRL+C to quit\u001b[0m\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"9Yc4ki4HbTIa"},"execution_count":null,"outputs":[]}]}